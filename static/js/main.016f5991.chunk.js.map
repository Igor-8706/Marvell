{"version":3,"sources":["components/appHeader/AppHeader.js","services/MarvelService.js","components/spinner/spinner.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","objectFit","src","img","alt","RandomChar","state","loading","error","marvelService","onCharLoaded","setState","length","slice","onError","updateChar","Math","floor","random","then","catch","onBtnUpdate","resizeImg","console","log","this","errorMessage","spinner","content","onClick","mjolnir","Component","View","notImage","indexOf","CharList","charList","newItemLoading","charEnded","ref","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","setCharRef","elem","push","coloringSelectedChar","forEach","classList","remove","add","focus","arr","item","i","imgStyle","tabIndex","props","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","onCharLoading","prevProps","prevState","skeleton","ErrorBoundary","errorInfo","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.016f5991.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","\r\n\r\nclass MarvelService {\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=7cde0c423056bf2a944614bc08284093';\r\n    _baseOffset = 210;\r\n\r\n    // получение данных с сервера\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n\r\n    // получение всех персонажей\r\n    getAllCharacters = async(offset = this._baseOffset) => {\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    // получение одного персонажа из БД\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // метод трансфомирует полученные от сервера данные удаляя ненужные в необходимый нам формат. возвращает объект с данными\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ margin: '0 auto', background: 'none', display: 'block' }} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n                <g transform=\"rotate(0)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n                <g transform=\"rotate(45)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n                <g transform=\"rotate(90)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n                <g transform=\"rotate(135)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n                <g transform=\"rotate(180)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n                <g transform=\"rotate(225)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n                <g transform=\"rotate(270)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n                <g transform=\"rotate(315)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // работа с внешним окружением, если картинка в папке public забираем ее оттуда\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt = 'error'/>\r\n\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n            src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from 'react';\nimport './randomChar.scss';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nclass RandomChar extends Component {\n    state = {\n        char: {\n            name: null,\n            description: null,\n            thumbnail: null,\n            homepage: null,\n            wiki: null,\n        },\n        loading: true,\n        error: false,\n    }\n\n    // Для работы с классом нужно создать его экземпляр\n    marvelService = new MarvelService();\n\n    // Изменение стейта при загрузке персонажа\n    onCharLoaded = (char) => {\n        //проверка на наличие описания персонажа\n        if (!char.description) {\n            this.setState({\n                char: {\n                    ...char,\n                    description: 'There is no description for this character...',\n                },\n                loading: false,\n            })\n        } else {\n            this.setState({ char, loading: false }) // == ({char: char})\n        }\n        // проверка на длину строки описания\n        if (char.description && char.description.length > 50) {\n            char.description = char.description.slice(0, 50) + '...';\n            this.setState({ char, loading: false })\n        }\n    }\n\n    // Ошибка при получении данных от сервера\n    onError = () => {\n        this.setState(\n            {\n                loading: false,\n                error: true\n            })\n    }\n\n    // вывод случайного персонажа через запрос к API на сервер Marvell. Используется метод класса marvelservice для запроса\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); //выбор персонажа в определенном интервале id\n        this.marvelService\n            .getCharacter(id)\n            .then(this.onCharLoaded) // в метод будут переданы данные от запроса автоматически\n            .catch(this.onError); // ошибка при получении данных\n    }\n\n    // Хук - компонент появляется на странице (монтируется)\n    componentDidMount() {\n        this.updateChar();\n        // this.intervalId = setInterval(this.updateChar, 3000);\n    }\n\n    // Хук - компонент удаляется со страницы\n    componentWillUnmount() {\n        // clearInterval(this.intervalId);\n    }\n\n    // Обновление персонажа при нажатии кнопки try it\n    onBtnUpdate = () => {\n        this.setState(\n            {\n                loading: true,\n                error: false\n            })\n        this.updateChar();\n    }\n\n    resizeImg = (img) => {\n        console.log(img)\n    }\n\n\n    render() {\n        const { char, loading, error } = this.state;\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(error || loading) ? <View char={char} /> : null; // если нет ошибки или если нет загрузки то возращаем контент\n\n        return (\n            <div className=\"randomchar\" >\n                {errorMessage} {/* произойдет отрисовка того, что не null*/}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br />\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\">\n                        <div onClick={this.onBtnUpdate} className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char\n    let notImage = false;\n    if (char.thumbnail.indexOf('available') > -1) {\n        notImage = true\n    }\n    const style = notImage ? \"contain\" : '';\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={{objectFit: style}} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default RandomChar;","import React, { Component } from 'react';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types'; // проверка типа данных пропсов\nimport './charList.scss';\n\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210,\n        charEnded: false\n    }\n    ref = [];\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    // получение дополнительных персонажей при клике на кнопку(пагинация)\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n    // данные загружаются\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n    // Данные загрузились\n    onCharListLoaded = (newCharList) => { //newCharList - новые данные приходящие от сервера\n        let ended = false;\n        if (newCharList.length < 9) { // если персонажи закончились\n            ended = true\n        }\n        this.setState(({ offset, charList }) => ({ //круглые скобки означают, что мы возвращаем объект из функции, вместо return\n            charList: [...charList, ...newCharList],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    // Формирование массива элементов li.\n    setCharRef = (elem) => {\n        this.ref.push(elem);\n\n    }\n    // Выделение цветом выбранного персонажа, реализовано при помощи массива с элементами (рефы)\n    coloringSelectedChar = (id) => {\n        this.ref.forEach(elem => {\n            elem.classList.remove('char__item_selected')\n        })\n        this.ref[id].classList.add('char__item_selected')\n        this.ref[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n            return (\n                <li\n                    ref={this.setCharRef} // каждая нода через реф записывается в массив\n                    tabIndex={0}\n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => {\n                        this.props.onCharSelected(item.id)\n                        this.coloringSelectedChar(i)\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.coloringSelectedChar(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render() {\n        const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\n\n        const items = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button\n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{ 'display': charEnded ? 'none' : 'block' }}\n                    onClick={() => this.onRequest(offset)}\n\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\nimport PropTypes from 'prop-types'; // проверка типа данных пропсов\nimport './charInfo.scss';\n\nclass CharInfo extends Component {\n\n    state = {\n        char: null,\n        loading: false,\n        error: false,\n    }\n\n    // Для работы с классом нужно создать его экземпляр\n    marvelService = new MarvelService();\n\n    // Хук, вызывается после того как компонент был создан на странице\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    // Хук, срабатывает когда в компонент приходит новый пропс, изменяется стейт\n    componentDidUpdate(prevProps, prevState) {\n        // проверка, действительно ли изменились пропсы, иначе приложение зациклится\n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    //Хук, отслеживание ошибки в компоненте. Не работает после 16 версии реакта. Вместо него используются предохранители.\n    // componentDidCatch(err, info){\n    //     this.setState({error: true})\n    // }\n\n    \n\n    // Загрузка персонажа при клике на карточку в charlist\n    updateChar = () => {\n        const { charId } = this.props;\n        if (!charId) {\n            return;\n        }\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n    }\n\n    // Изменение стейта при загрузке персонажа\n    onCharLoaded = (char) => {\n        //проверка на наличие описания персонажа\n        if (!char.description) {\n            this.setState({\n                char: {\n                    ...char,\n                    description: 'There is no description for this character...',\n                },\n                loading: false,\n            })\n        } else {\n            this.setState({ char, loading: false }) // == ({char: char})\n        }\n        // проверка на длину строки описания\n        if (char.description && char.description.length > 50) {\n            char.description = char.description.slice(0, 50) + '...';\n            this.setState({ char, loading: false })\n        }\n    }\n\n    // Ошибка при получении данных от сервера\n    onError = () => {\n        this.setState(\n            {\n                loading: false,\n                error: true\n            })\n    }\n\n    // Установка состояния для показа спинера при загрузке данных\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    render() {\n        const { char, loading, error } = this.state;\n\n        const skeleton = char || loading || error ? null : <Skeleton /> // Если персонаж не загружен, ошибки нет, загрузки нет, то выводим заглушку Скелетон\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = !(error || loading || !char) ? <View char={char} /> : null; // если нет ошибки или если нет загрузки то возращаем контент\n\n        return (\n            <div className=\"char__info\">\n                {/* при помощи условий отобразится только один компонент */}\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const notComics = 'not comics';\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style = {imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {comics.map((item, i) => {\n                    if (i > 9 ) return;\n                    return (\n                        <li key = {i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    )}\n                )}\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // // встроенный метод, изменяющий только стейт при ошибке\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error:true}\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error === true){\r\n            <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nclass App extends Component {\n    state = {\n        selectedChar: null\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader />\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar />\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected} />\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar} /> {/*Предохранитель, в случае поломки charInfo*/}\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n// import MarvelService from './services/MarvelService';\nimport './style/style.scss';\n\n// // Для работы с классом нужно создать его экземпляр\n// const marvelService = new MarvelService();\n\n// // из метода возращается промис, поэтому then\n// marvelService.getAllCharacters().then(res => res.data.results.forEach(item => console.log(item.name)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}