{"version":3,"sources":["services/MarvelService.js","hooks/http.hook.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","components/spinner/spinner.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/404.js","components/pages/SinglePage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/appHeader/AppHeader.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/app/App.js","index.js"],"names":["useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getComics","_transformComics","getComic","id","getCharacter","getCharacterByName","name","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","Spinner","xmlns","background","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","Skeleton","className","setContent","Component","AppBanner","avengers","avengersLogo","Page404","to","SinglePage","dataType","useParams","setData","useEffect","updateData","then","onDataLoaded","View","notImage","indexOf","href","RandomChar","setChar","updateChar","onCharLoaded","length","slice","Math","floor","random","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","loading","error","onRequest","initial","onCharListLoaded","newCharList","ended","ref","useRef","coloringSelectedChar","current","forEach","elem","classList","remove","add","focus","elements","useMemo","arr","item","i","imgStyle","CSSTransition","timeout","classNames","el","tabIndex","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","CharInfo","charId","ErrorBoundary","state","errorInfo","this","setState","children","CharSearchForm","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","placeholder","MainPage","selectedChar","Helmet","content","decoration","AppHeader","end","color","isActive","ComicsList","comicsList","setComicsList","setnewItemLoading","comicsEnded","setComicsEnded","onComicsListLoaded","newComicsList","ComicsPage","lazy","SingleComicLayout","SingleCharLayout","Pages","fallback","element","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4762051a.chunk.js","sourcesContent":["import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=7cde0c423056bf2a944614bc08284093';\r\n    const _baseOffset = 210;\r\n\r\n    // получение данных с сервера\r\n\r\n    // получение всех персонажей\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    // получение комиксов\r\n    const getComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    //получение одного комикса\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    // получение одного персонажа из БД\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    // получение персонажа по имени\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    // метод трансфомирует полученные от сервера данные удаляя ненужные в необходимый нам формат. возвращает объект с данными\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    // трансформирование данных с комиксами\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    }\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        clearError,\r\n        getCharacter,\r\n        getAllCharacters,\r\n        getComics,\r\n        getComic,\r\n        getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n\r\n    // собственный хук, устанавливающий состояние loading и error при выполнении запроса на сервер.\r\n    // UseCallback используется для кеширования функции request, что дает возможноть ее использования без дополнительного вызова и перерисовки компонента\r\n    // данный хук только отправляет запрос на сервер, но не обрабатывает ошибки. поэтому используется try-catch\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    },[]);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // работа с внешним окружением, если картинка в папке public забираем ее оттуда\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt = 'error'/>\r\n\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }}\r\n            src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ margin: '0 auto', background: 'none', display: 'block' }} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n                <g transform=\"rotate(0)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n                <g transform=\"rotate(45)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n                <g transform=\"rotate(90)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n                <g transform=\"rotate(135)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n                <g transform=\"rotate(180)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n                <g transform=\"rotate(225)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n                <g transform=\"rotate(270)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n                <g transform=\"rotate(315)\">\r\n                    <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n                        <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n                        <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n                    </circle>\r\n                </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\n// машина состояний - принимает только одно состояние, в зависимости от которого генерируется нужный контент\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>  \r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>\r\n            break;\r\n        case 'confirmed' :\r\n            return <Component data={data}/>\r\n            break;\r\n        case 'error' :\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state')\r\n            break;\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div>\r\n            <ErrorMessage/>\r\n            <p style={{'textAlign' : 'center', 'fontWeight':'bold', 'fontSize':'24px', 'marginTop':'30px'}}>Page doesn't exist</p>\r\n            <Link style={{'display':'block', 'textAlign':'center', 'fontWeight':'bold', 'fontSize':'24px', 'marginTop':'30px'}} \r\n                    to={'/Marvell'}>Back to main page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page404;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\n\r\n\r\n// import './singleComicPage.scss';\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n    const {  getComic, getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData(); // используется если пользователь вручную поправит адрес страницы\r\n    }, [id])\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'))\r\n                break;\r\n            case 'char':\r\n                getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'))\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <AppBanner />\r\n            {setContent(process, Component, data )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SinglePage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    // Для работы с классом нужно создать его экземпляр  - для классового компонента\n    // const marvelService = new MarvelService();\n\n    // Хук - имитация состояния после появления на странице (монтирования)\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 600000);\n        // return () => {\n        //     clearInterval(timerId)\n        // }\n    }, [])\n\n    // Изменение стейта при загрузке персонажа\n    const onCharLoaded = (char) => {\n        //проверка на наличие описания персонажа\n        if (!char.description) {\n            setChar({ ...char, description: 'There is no description for this character...' });\n        } else {\n            setChar(char);\n        }\n        // проверка на длину строки описания\n        if (char.description && char.description.length > 50) {\n            char.description = char.description.slice(0, 50) + '...';\n            setChar(char);\n        }\n    }\n\n    // вывод случайного персонажа через запрос к API на сервер Marvell. Используется метод класса marvelservice для запроса\n    const updateChar = () => {\n        clearError(); //очистка ошибки, если она была при прошлом обновлении\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); //выбор персонажа в определенном интервале id\n        getCharacter(id)\n            .then(onCharLoaded) // в метод будут переданы данные от запроса автоматически\n            .then(()=> setProcess('confirmed'))\n    }\n\n\n    return (\n        <div className=\"randomchar\" >\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div onClick={updateChar} className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data\n    let notImage = false;\n    if (thumbnail.indexOf('available') > -1) {\n        notImage = true\n    }\n    const style = notImage ? \"contain\" : '';\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={{ objectFit: style }} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default RandomChar;","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types'; // проверка типа данных пропсов\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>  \n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n            break;\n        case 'confirmed' :\n            return <Component/>\n            break;\n        case 'error' :\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state')\n            break;\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters, process, setProcess } = useMarvelService();\n    const duration = 1200; //для анимации\n\n    useEffect(() => {\n        onRequest(offset, true); // хук состояния, эмуляция хука жизненного цикла componentDidMount. \n    }, [])           //При передаче пустого массива зависимостей вызовется только один раз. UseEffect запускается после Rendera компонента\n\n\n    // получение дополнительных персонажей при клике на кнопку(пагинация)\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true); // первичная (в useeffect) или повторная загрузка\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n    // Данные загрузились\n    const onCharListLoaded = (newCharList) => { //newCharList - новые данные приходящие от сервера\n        let ended = false;\n        if (newCharList.length < 9) { // если персонажи закончились\n            ended = true\n        }\n        // this.setState(({ offset, charList }) => ({ //круглые скобки означают, что мы возвращаем объект из функции, вместо return\n        //     charList: [...charList, ...newCharList],\n        //     loading: false,\n        //     newItemLoading: false,\n        //     offset: offset + 9,\n        //     charEnded: ended\n        // }))\n        // далее классовый компонент переписан на функциональный с использованием хуков\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const ref = useRef([]);\n\n    // Формирование массива элементов li при помощи рефов\n    // setCharRef = (elem) => {\n    //     this.ref.push(elem);\n    // }\n\n    // Выделение цветом выбранного персонажа, реализовано при помощи массива с элементами (рефы)\n    const coloringSelectedChar = (id) => {\n        ref.current.forEach(elem => {\n            elem.classList.remove('char__item_selected')\n        })\n        ref.current[id].classList.add('char__item_selected')\n        ref.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n            return (\n                <CSSTransition key={item.id} timeout={duration} classNames='char-animate'>\n                    <li\n                        ref={el => ref.current[i] = el} // каждая нода через реф записывается в массив. el - ссылка на элемент, на котором реф был вызван\n                        tabIndex={0}\n                        className=\"char__item\"\n                        // key={item.id}\n                        key={i}\n                        onClick={() => {\n                            props.onCharSelected(item.id)\n                            coloringSelectedChar(i)\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                coloringSelectedChar(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}> {/* TransGroup - автоматически следит за изменением component = null для того чтобы не рендерить лишний div */}\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    // конструция создана для мемоизации функции setcontent. Это позволяет не перерисовавыть ее каждый раз при перерисовке \n    // родительского компонента MainPage. Позволяет решить вопрос с выделением цветом выбранного персонажа\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n// Проверка типа пропсов. В данном случае проверка на то, что пропс oncgarSelected будет являться функцией\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types'; // проверка типа данных пропсов\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    // // Для работы с классом нужно создать его экземпляр\n    // // marvelService = new MarvelService();\n    // const marvelService = new MarvelService();\n\n    // Хук, вызывается после того как компонент был создан на странице\n    // componentDidMount() {\n    //     this.updateChar();\n    // }\n    useEffect(() => {\n        updateChar()\n    }, [])\n\n    // Хук, срабатывает когда в компонент приходит новый пропс, изменяется стейт\n    // componentDidUpdate(prevProps, prevState) {\n    //     // проверка, действительно ли изменились пропсы, иначе приложение зациклится\n    //     if (this.props.charId !== prevProps.charId) {\n    //         this.updateChar();\n    //     }\n    // }\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    //Хук, отслеживание ошибки в компоненте. Не работает после 16 версии реакта. Вместо него используются предохранители.\n    // componentDidCatch(err, info){\n    //     this.setState({error: true})\n    // }\n\n    // Загрузка персонажа при клике на карточку в charlist\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(()=> setProcess('confirmed'))\n    }\n\n    // Изменение стейта при загрузке персонажа\n    const onCharLoaded = (char) => {\n        //проверка на наличие описания персонажа\n        if (!char.description) {\n            // this.setState({\n            //     char: {\n            //         ...char,\n            //         description: 'There is no description for this character...',\n            //     },\n            //     loading: false,\n            // })\n            setChar({ ...char, description: 'There is no description for this character...' });\n        } else {\n            // this.setState({ char, loading: false }) // == ({char: char})\n            setChar(char);\n        }\n        // проверка на длину строки описания\n        if (char.description && char.description.length > 50) {\n            char.description = char.description.slice(0, 50) + '...';\n            // this.setState({ char, loading: false })\n            setChar(char);\n        }\n    }\n\n    // const skeleton = char || loading || error ? null : <Skeleton /> // Если персонаж не загружен, ошибки нет, загрузки нет, то выводим заглушку Скелетон\n    // const errorMessage = error ? <ErrorMessage /> : null;\n    // const spinner = loading ? <Spinner /> : null;\n    // const content = !(error || loading || !char) ? <View char={char} /> : null; // если нет ошибки или если нет загрузки то возращаем контент\n\n    return (\n        <div className=\"char__info\">\n\n            {setContent(process, View, char)}\n\n            {/* при помощи условий отобразится только один компонент\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics, id } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {comics.map((item, i) => {\n                    // if (i > 9) return;\n                    return (\n                        <Link to={`comics/108427`} key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </Link>\n                    )\n                }\n                )}\n            </ul>\n        </>\n    \n    \n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // // встроенный метод, изменяющий только стейт при ошибке\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error:true}\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error === true){\r\n            <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './charSearchForm.scss'\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(()=> setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={(process === 'loading' ? true : false)}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {(process === 'confirmed') ? results : errorMessage }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null); //хук, устанавливает state, аналог сет стейт в классовых компонентах\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>  {/* сторонняя бибиотека, позволяет менять title и др на страницах для SEO оптимизации */}\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n\r\n","import { Link, NavLink } from 'react-router-dom'; // Используется для задания ссылок, переход между страницами\nimport './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <Link to='/Marvell'>\n                    <span>Marvel</span> information portal\n                </Link>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><NavLink\n                        end\n                        // activeStyle={{ 'color': '#9f0013' }} для 5 версии react router\n                        style={({isActive}) => ({color: isActive ? '#9f0013' : 'inherit'})}\n                        to=\"/Marvell\">Characters\n                    </NavLink>\n                    </li>\n                    /\n                    <li><NavLink\n                        style={({isActive}) => ({color: isActive ? '#9f0013' : 'inherit'})}\n                        to=\"/Marvell/comics\">Comics\n                    </NavLink>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />\n            break;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />\n            break;\n        case 'confirmed':\n            return <Component />\n            break;\n        case 'error':\n            return <ErrorMessage />\n        default:\n            throw new Error('Unexpected process state')\n            break;\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getComics, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getComics(210)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n        <Helmet>  {/* сторонняя бибиотека, позволяет менять title и др на страницах для SEO оптимизации */}\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner></AppBanner>\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;\r\n","import { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport AppHeader from \"../appHeader/AppHeader\";\nimport Spinner from '../spinner/spinner';\nimport './App.css'\nimport { ComicsPage } from '../pages';\n// для работы ленивой загрузки нужен экпорт по умолчанию, а он в файле 404, а не в pages. Все динамичесские импорты после статических\nconst Page404 = lazy(() => import('../pages/404'));\nconst MainPage = lazy(() => import('../pages/MainPage'));\nconst SinglePage = lazy(() => import('../pages/SinglePage'));\nconst SingleComicLayout = lazy(() => import('../pages/singleComicLayout/SingleComicLayout'));\nconst SingleCharLayout = lazy(() => import('../pages/singleCharLayout/singleCharLayout'));\n\nconst App = () => {\n\n    return (\n        <Router>\n            <div className=\"app\">\n                <AppHeader />\n                <main>\n                    <Pages />\n                </main>\n            </div>\n        </Router >\n    )\n}\n\nconst Pages = () => {\n    return (\n        <Suspense fallback={<Spinner />}> {/* компонент реакта, нужен для использования динамического импорта (lazy)*/}\n            <Routes> {/* для загрузки только одной страницы. без switch(routes) обе страницы загрузятся в одном окне*/}\n                <Route path=\"/Marvell\" element={<MainPage />} />  {/* первая страница. exact(для версии 5) - полное совпадение пути*/}\n                <Route path=\"Marvell/comics\" element={<ComicsPage />} />  {/* вторая страница*/}\n                <Route path=\"Marvell/comics/:id\" element={<SinglePage Component={SingleComicLayout} dataType='comic' />} />  {/* перенаправление либо на комикс либо на персонажа*/}\n                <Route path=\"Marvell/characters/:id\" element={<SinglePage Component={SingleCharLayout} dataType='char' />} />  {/* component - используется в singlepage */}\n                <Route path=\"*\" element={<Page404 />}></Route>\n            </Routes>\n        </Suspense>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client'\nimport App from './components/app/App';\n// import MarvelService from './services/MarvelService';\nimport './style/style.scss';\n\n// // Для работы с классом нужно создать его экземпляр\n// const marvelService = new MarvelService();\n\n// // из метода возращается промис, поэтому then\n// marvelService.getAllCharacters().then(res => res.data.results.forEach(item => console.log(item.name)));\n\nReactDOM\n  .createRoot(document.getElementById('root'))\n  .render(\n      <App />\n  );\n\n\n// для 17 версии реакт -->\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n"],"sourceRoot":""}